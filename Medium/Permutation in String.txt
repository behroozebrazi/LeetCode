https://leetcode.com/problems/permutation-in-string/submissions/

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False
        left = 0
        s1Map = Counter(s1)
        s2Map = defaultdict(int)
        for i in range(len(s1)):
            s2Map[s2[i]] += 1
        if s1Map == s2Map:
            return True
        
        for i in range(len(s1), len(s2)):
            s2Map[s2[i]] += 1
            leftCh = s2[left]
            left += 1
            if s2Map[leftCh] == 1:
                del s2Map[leftCh]
            else:
                s2Map[leftCh] -= 1
            if s1Map == s2Map:
                return True
        return False

    # Explanation:
    # First I compare the length of s1 and s2, and if they are not compatible I return False. Second I count
    # the characters in s1 and count the characters in s2 until the length of s1. If the result maps are the
    # same in keys and values, I return True.
    # Now I walk through the rest of the string s2. I add one character from the left side of the rest
    # character in string s2, and I decrease or remove the left character of the window map of the string s2.
    # It means I add a character of s2 which is not added yet to the window and it was the right side of the
    # window. Then I find the leftmost character in the window and remove it from the s2 map by removing it
    # if its value was one or decreasing its value if its value was greater than one. Next, I check the
    # equality of the two maps from the s1 and the window. If they are equal, I return True, otherwise, I
    # repeat the loop and take the next character from s2 until I reach the end of s2 and return False.