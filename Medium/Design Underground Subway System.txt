class UndergroundSystem:

    def __init__(self):
        self.traveled = dict()
        self.travel = dict()

    def checkIn(self, id: int, stationName: str, t: int) -> None:
        self.travel[id] = (stationName, t)
        
    def checkOut(self, id: int, stationName: str, t: int) -> None:
        destination, startTime = self.travel.pop(id)
        key = (destination, stationName)
        lst = self.traveled[key] if key in self.traveled else [0, 0]
        self.traveled[key] = [lst[0] + t - startTime, lst[1] + 1]

    def getAverageTime(self, startStation: str, endStation: str) -> float:
        lst = self.traveled[(startStation, endStation)]
        return lst[0] / lst[1]
        
    # Explanation:
    # I define 2 dictionaries. The first one keeps track of each individual travel. Actually, it keeps 
    # the start station information for each customer, and it pops (removes) it when the customer checks
    # out. The second dictionary keeps the sum of travel times of all customers and the number of travels.
    # I use the name of start and end stations as the key. Finally, for taking an average, I consider the
    # start and end stations' name as a key and extract the information of this travel from the second
    # dictionary which is only 2 numbers, the sum and the number of travels from the given start and end
    # stations. The result is dividing the first number (sum) by the second number (number of travels).

# Your UndergroundSystem object will be instantiated and called as such:
# obj = UndergroundSystem()
# obj.checkIn(id,stationName,t)
# obj.checkOut(id,stationName,t)
# param_3 = obj.getAverageTime(startStation,endStation)